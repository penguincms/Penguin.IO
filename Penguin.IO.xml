<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Penguin.IO</name>
    </assembly>
    <members>
        <member name="T:Penguin.IO.Compression.GZip">
            <summary>
            Simplifys data compression using GZip
            </summary>
        </member>
        <member name="M:Penguin.IO.Compression.GZip.Compress(System.String)">
            <summary>
            Compresses the input string
            </summary>
            <param name="source">The string to compress</param>
            <returns>A GZipped byte array representing the string</returns>
        </member>
        <member name="M:Penguin.IO.Compression.GZip.CopyTo(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies from one stream to another
            </summary>
            <param name="src">The source stream</param>
            <param name="dest">The destination stream</param>
        </member>
        <member name="M:Penguin.IO.Compression.GZip.Decompress(System.Byte[])">
            <summary>
            Decompresses the provided byte array into its source string representation
            </summary>
            <param name="source">The byte array to decompress</param>
            <returns>The original string before it was compressed</returns>
        </member>
        <member name="T:Penguin.IO.Exceptions.DirectoryAlreadyExistsException">
            <summary>
            An attempt to move or create a directory in a location has failed because it already exists
            </summary>
        </member>
        <member name="T:Penguin.IO.Exceptions.FileAlreadyExistsException">
            <summary>
            An attempt to move or create a File in a location has failed because it already exists
            </summary>
        </member>
        <member name="T:Penguin.IO.Exceptions.PathAlreadyExistsException">
            <summary>
            An attempt to move or create a file or directory in a location has failed because it already exists
            </summary>
        </member>
        <member name="M:Penguin.IO.Extensions.DirectoryInfoExtensions.EnumerateFiles(System.IO.DirectoryInfo,System.Action{System.IO.DirectoryInfo,System.Exception},System.String,System.IO.SearchOption)">
            <summary>
            Enumerate files but calls an exception handler method for exceptions instead of bombing out
            </summary>
            <param name="di">Target DirectoryInfo</param>
            <param name="onError">Action to call on error</param>
            <param name="searchPattern">Search mask. * by default</param>
            <param name="searchOption">Recursive or not. Recursive by default</param>
            <returns></returns>
        </member>
        <member name="M:Penguin.IO.Extensions.DirectoryInfoExtensions.EnumerateDirectories(System.IO.DirectoryInfo,System.Action{System.IO.DirectoryInfo,System.Exception},System.String,System.IO.SearchOption)">
            <summary>
            Enumerate Directories but calls an exception handler method for exceptions instead of bombing out
            </summary>
            <param name="di">Target DirectoryInfo</param>
            <param name="onError">Action to call on error</param>
            <param name="searchPattern">Search mask. * by default</param>
            <param name="searchOption">Recursive or not. Recursive by default</param>
            <returns></returns>
        </member>
        <member name="M:Penguin.IO.Extensions.DirectoryInfoExtensions.EnumerateFileSystemInfos(System.IO.DirectoryInfo,System.Action{System.IO.DirectoryInfo,System.Exception},System.String,System.IO.SearchOption)">
            <summary>
            Enumerate FileSystemInfos but calls an exception handler method for exceptions instead of bombing out
            </summary>
            <param name="di">Target DirectoryInfo</param>
            <param name="onError">Action to call on error</param>
            <param name="searchPattern">Search mask. * by default</param>
            <param name="searchOption">Recursive or not. Recursive by default</param>
            <returns></returns>
        </member>
        <member name="M:Penguin.IO.Extensions.FileInfoExtensions.MoveTo(System.IO.FileInfo,System.String,Penguin.IO.Objects.ExistingFileBehaviour)">
            <summary>
            Moves a file info to a new location, allowing specification of behaviour
            </summary>
            <param name="file">The file to move</param>
            <param name="newPath">The target path for the file</param>
            <param name="behaviour">How conflicting files should be handled</param>
            <returns>An object containing information relevant to the operation</returns>
        </member>
        <member name="M:Penguin.IO.Extensions.StreamExtensions.ReadFully(System.IO.Stream,System.Int32)">
            <summary>
            Reads data from a stream until the end is reached. The
            data is returned as a byte array. An IOException is
            thrown if any of the underlying IO calls fail.
            </summary>
            <param name="stream">The stream to read data from</param>
            <param name="initialLength">The initial buffer length</param>
        </member>
        <member name="T:Penguin.IO.Objects.BufferedFileReader">
            <summary>
            A stream reader that buffers and chunks out the source file to prevent slowdowns when requesting single characters
            </summary>
        </member>
        <member name="P:Penguin.IO.Objects.BufferedFileReader.EndOfStream">
            <summary>
            True if the base reader has reached the end of the stream, and the reader has reached the end of its buffer
            </summary>
        </member>
        <member name="P:Penguin.IO.Objects.BufferedFileReader.Progress">
            <summary>
            A decimal representing the % of the way the pointer is through the base stream AND buffer
            </summary>
        </member>
        <member name="M:Penguin.IO.Objects.BufferedFileReader.#ctor(System.String,System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="path">The path of the file to read</param>
            <param name="BufferSize">The number of characters of the file to buffer into memory</param>
        </member>
        <member name="M:Penguin.IO.Objects.BufferedFileReader.Read">
            <summary>
            Reads the next int from the buffer and if necessary, refills it
            </summary>
            <returns>The next int from the buffer</returns>
        </member>
        <member name="T:Penguin.IO.Objects.FileUtil">
            <summary>
            Provides interop access to a file for requesting information from the OS
            </summary>
        </member>
        <member name="M:Penguin.IO.Objects.FileUtil.WhoIsLocking(System.String)">
             <summary>
             Find out what process(es) have a lock on the specified file.
             </summary>
             <param name="path">Path of the file.</param>
             <returns>Processes locking the file</returns>
             <remarks>See also:
             http://msdn.microsoft.com/en-us/library/windows/desktop/aa373661(v=vs.85).aspx
             http://wyupdate.googlecode.com/svn-history/r401/trunk/frmFilesInUse.cs (no copyright in code at time of viewing)
            
             </remarks>
        </member>
        <member name="M:Penguin.IO.Objects.IOHelper.FindFileName(System.String)">
            <summary>
            Given a file path, finds a path that does not exist already using standard windows rename logic (ex Picture (1).jpg)
            </summary>
            <param name="path">The intended path</param>
            <returns>The free path, either original or renamed</returns>
        </member>
        <member name="M:Penguin.IO.Objects.IOHelper.FindDirectoryName(System.String)">
            <summary>
            Given a directory path, finds a path that does not exist already using standard windows rename logic (ex Images (1))
            </summary>
            <param name="path">The intended path</param>
            <returns>The free path, either original or renamed</returns>
        </member>
        <member name="T:Penguin.IO.Serialization.XML">
            <summary>
            Contains methods for interacting with Xml strings
            </summary>
        </member>
        <member name="M:Penguin.IO.Serialization.XML.ToObject``1(System.String)">
            <summary>
            Deserializes and object from an XML string or file
            </summary>
            <typeparam name="T">The resulting object type</typeparam>
            <param name="source">The source file or XML string</param>
            <returns>The deserialized object</returns>
        </member>
    </members>
</doc>
